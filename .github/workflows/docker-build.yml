name: Build Docker image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  linter:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version-file: '.python-version'

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files

  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract branch name
        shell: bash
        run: |
          BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/^\-\+\|\-\+$//g' | sed 's/\-\+/-/g')
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's/^[.-]//')
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | cut -c1-128)
          if [ -z "$SANITIZED_BRANCH" ]; then
            SANITIZED_BRANCH="branch"
          fi
          echo "branch=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          echo "Original branch: $BRANCH_NAME"
          echo "Sanitized branch: $SANITIZED_BRANCH"
        id: extract_branch

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-{{sha}}
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.extract_branch.outputs.branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Output image information
        run: |
          echo "Built and pushed images:"
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            echo "  - $tag"
          done
          echo ""
          echo "Image can be pulled with:"
          echo "  docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract_branch.outputs.branch }}"
